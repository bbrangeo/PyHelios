"""
D√©monstration du mouvement orbital dans PyHelios Visualizer.

Ce script montre comment utiliser les nouvelles fonctionnalit√©s de mouvement orbital
ajout√©es au Visualizer PyHelios.
"""

import math
import time
from typing import List, Tuple, Optional

from pyhelios import Context, Visualizer, WeberPennTree, WPTType
from pyhelios.types import vec3, RGBcolor, make_vec3


def create_simple_scene(context: Context) -> Tuple[Optional[int], List[str]]:
    """
    Cr√©e une sc√®ne simple pour la d√©monstration orbitale.

    Args:
        context: Contexte PyHelios

    Returns:
        Tuple contenant l'ID de l'arbre et la liste des UUIDs
    """
    print("üå≥ Cr√©ation d'une sc√®ne simple...")

    # Cr√©er un arbre simple
    try:
        with WeberPennTree(context) as wpt:
            wpt.setBranchRecursionLevel(2)
            wpt.setTrunkSegmentResolution(8)
            wpt.setBranchSegmentResolution(8)
            wpt.setLeafSubdivisions(1, 1)

            tree_origin = vec3(0, 0, 0)
            tree_id = wpt.buildTree(WPTType.APPLE, origin=tree_origin)

            # R√©cup√©rer les UUIDs
            trunk_uuids = wpt.getTrunkUUIDs(tree_id)
            branch_uuids = wpt.getBranchUUIDs(tree_id)
            leaf_uuids = wpt.getLeafUUIDs(tree_id)

            # Configurer les propri√©t√©s
            all_uuids = trunk_uuids + branch_uuids + leaf_uuids

            for trunk_uuid in trunk_uuids:
                context.setPrimitiveDataFloat(trunk_uuid, "reflectivity_SW", 0.6)
                context.setPrimitiveDataString(trunk_uuid, "plant_part", "trunk")

            for branch_uuid in branch_uuids:
                context.setPrimitiveDataFloat(branch_uuid, "reflectivity_SW", 0.6)
                context.setPrimitiveDataString(branch_uuid, "plant_part", "branch")

            for leaf_uuid in leaf_uuids:
                context.setPrimitiveDataFloat(leaf_uuid, "reflectivity_SW", 0.2)
                context.setPrimitiveDataString(leaf_uuid, "plant_part", "leaf")

            print(f"‚úÖ Sc√®ne cr√©√©e avec {len(all_uuids)} primitives")
            return tree_id, all_uuids

    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la sc√®ne: {e}")
        return None, []


def orbital_animation_demo(visualizer: Visualizer, center_point: vec3) -> None:
    """
    D√©monstration de diff√©rentes animations orbitales.

    Args:
        visualizer: Objet Visualizer PyHelios
        center_point: Point central pour l'orbite
    """
    print("üé¨ D√©monstration des animations orbitales")
    print("=" * 50)

    # Configuration 1: Orbite lente et fluide
    print("\n1Ô∏è‚É£ Animation lente et fluide...")
    create_orbital_camera_animation(
        visualizer=visualizer,
        center_point=center_point,
        radius=15.0,
        duration=10.0,
        elevation_range=(0.3, 1.0),
        num_frames=60,
    )

    time.sleep(1)  # Pause entre les animations

    # Configuration 2: Orbite rapide et dynamique
    print("\n2Ô∏è‚É£ Animation rapide et dynamique...")
    create_orbital_camera_animation(
        visualizer=visualizer,
        center_point=center_point,
        radius=20.0,
        duration=5.0,
        elevation_range=(0.1, 1.2),
        num_frames=30,
    )

    time.sleep(1)

    # Configuration 3: Orbite serr√©e et d√©taill√©e
    print("\n3Ô∏è‚É£ Animation serr√©e et d√©taill√©e...")
    create_orbital_camera_animation(
        visualizer=visualizer,
        center_point=center_point,
        radius=8.0,
        duration=8.0,
        elevation_range=(0.4, 0.9),
        num_frames=40,
    )


def create_orbital_camera_animation(
    visualizer: Visualizer,
    center_point: vec3,
    radius: float = 15.0,
    duration: float = 10.0,
    elevation_range: Tuple[float, float] = (0.2, 1.2),
    num_frames: int = 60,
) -> None:
    """
    Cr√©e une animation orbitale de la cam√©ra autour d'un point central.

    Args:
        visualizer: Objet Visualizer PyHelios
        center_point: Point central autour duquel la cam√©ra va orbiter
        radius: Rayon de l'orbite
        duration: Dur√©e de l'animation en secondes
        elevation_range: Plage d'√©l√©vation (theta min, theta max) en radians
        num_frames: Nombre de frames pour l'animation
    """
    print(f"üé¨ Animation orbitale - Rayon: {radius:.1f}, Dur√©e: {duration:.1f}s")

    # Calcul des param√®tres d'animation
    frame_duration = duration / num_frames
    theta_min, theta_max = elevation_range

    for frame in range(num_frames):
        # Calcul de l'angle azimutal (phi) - rotation compl√®te
        phi = 2 * math.pi * frame / num_frames

        # Calcul de l'angle d'√©l√©vation (theta) - oscillation entre min et max
        theta = theta_min + (theta_max - theta_min) * (
            0.5 + 0.5 * math.sin(2 * math.pi * frame / num_frames)
        )

        # Conversion des coordonn√©es sph√©riques en cart√©siennes
        x = center_point.x + radius * math.sin(theta) * math.cos(phi)
        y = center_point.y + radius * math.sin(theta) * math.sin(phi)
        z = center_point.z + radius * math.cos(theta)

        # Position de la cam√©ra
        camera_position = vec3(x, y, z)

        # La cam√©ra regarde toujours vers le centre
        look_at = center_point

        # Mise √† jour de la position de la cam√©ra
        visualizer.setCameraPosition(camera_position, look_at)

        # Mise √† jour de l'affichage
        visualizer.plotUpdate()

        # Pause pour l'animation
        time.sleep(frame_duration)

        # Affichage du progr√®s
        if frame % 10 == 0:
            progress = (frame / num_frames) * 100
            print(
                f"   Progr√®s: {progress:.0f}% - Position: ({x:.1f}, {y:.1f}, {z:.1f})"
            )

    print("‚úÖ Animation termin√©e!")


def main():
    """
    Fonction principale de d√©monstration.
    """
    print("üöÄ D√©monstration du mouvement orbital PyHelios")
    print("=" * 60)

    # Cr√©er le contexte
    with Context() as context:
        # Cr√©er une sc√®ne simple
        tree_id, all_uuids = create_simple_scene(context)

        if tree_id is None:
            print("‚ùå Impossible de cr√©er la sc√®ne")
            return

        # Cr√©er le visualizer
        with Visualizer(800, 600, headless=False) as visualizer:
            # Charger la g√©om√©trie
            visualizer.buildContextGeometry(context)

            # Configurer la sc√®ne
            visualizer.setBackgroundColor(RGBcolor(0.1, 0.1, 0.15))
            visualizer.setLightDirection(vec3(1, 1, 1))
            visualizer.setLightingModel("phong_shadowed")

            # Point central pour l'orbite
            orbit_center = vec3(0, 0, 2)

            # Position initiale de la cam√©ra
            initial_radius = 15.0
            initial_theta = 0.6
            initial_phi = 0.0

            x = orbit_center.x + initial_radius * math.sin(initial_theta) * math.cos(
                initial_phi
            )
            y = orbit_center.y + initial_radius * math.sin(initial_theta) * math.sin(
                initial_phi
            )
            z = orbit_center.z + initial_radius * math.cos(initial_theta)

            visualizer.setCameraPosition(vec3(x, y, z), orbit_center)

            print("\nüéÆ Contr√¥les disponibles:")
            print("  - Souris: Navigation manuelle")
            print("  - Fermer la fen√™tre pour quitter")

            # D√©marrer les animations orbitales
            try:
                orbital_animation_demo(visualizer, orbit_center)
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è D√©monstration interrompue")
            except Exception as e:
                print(f"\n‚ùå Erreur: {e}")

            print("\nüéÆ Mode interactif - vous pouvez maintenant naviguer manuellement")
            visualizer.plotInteractive()


if __name__ == "__main__":
    main()

"""
Calcul du Sky View Factor (SVF) avec Helios.

Le Sky View Factor repr√©sente la fraction du ciel visible depuis un point donn√©,
crucial pour l'√©valuation de l'exposition au rayonnement solaire et au refroidissement radiatif.

M√©thodes impl√©ment√©es :
1. M√©thode de projection h√©misph√©rique
2. M√©thode de ray casting
3. M√©thode de simulation de rayonnement diffus
"""

import math
import numpy as np
import pandas as pd
from typing import List, Tuple, Dict, Optional
from dataclasses import dataclass
import matplotlib.pyplot as plt

from pyhelios import Context, RadiationModel, Visualizer
from pyhelios.types import *


@dataclass
class SVFResult:
    """R√©sultat du calcul de Sky View Factor."""

    svf_value: float
    sky_visible: float
    obstacles_visible: float
    total_hemisphere: float
    method: str
    point_position: vec3
    resolution: int


class SkyViewFactorCalculator:
    """Calculateur de Sky View Factor pour Helios."""

    def __init__(self, context: Context, resolution: int = 100):
        """
        Initialise le calculateur de SVF.

        Args:
            context: Contexte Helios
            resolution: R√©solution angulaire (nombre de directions)
        """
        self.context = context
        self.resolution = resolution
        self.hemisphere_directions = self._generate_hemisphere_directions()

    def _generate_hemisphere_directions(self) -> List[vec3]:
        """
        G√©n√®re les directions de l'h√©misph√®re sup√©rieur pour le calcul du SVF.

        Returns:
            Liste des directions normalis√©es
        """
        directions = []

        # G√©n√©ration des directions selon une grille sph√©rique
        for i in range(self.resolution):
            for j in range(self.resolution):
                # Angles sph√©riques
                theta = (
                    math.pi * i / (self.resolution - 1)
                )  # 0 √† œÄ (h√©misph√®re sup√©rieur)
                phi = 2 * math.pi * j / self.resolution  # 0 √† 2œÄ (azimut)

                # Conversion en coordonn√©es cart√©siennes
                x = math.sin(theta) * math.cos(phi)
                y = math.sin(theta) * math.sin(phi)
                z = math.cos(theta)  # Composante verticale positive

                directions.append(vec3(x, y, z))

        return directions

    def calculate_svf_ray_casting(
        self, point: vec3, max_distance: float = 1000.0
    ) -> SVFResult:
        """
        Calcule le SVF par ray casting.

        Args:
            point: Position du point d'√©valuation
            max_distance: Distance maximale de ray casting

        Returns:
            R√©sultat du calcul de SVF
        """
        print(
            f"üîç Calcul du SVF par ray casting au point ({point.x:.2f}, {point.y:.2f}, {point.z:.2f})"
        )

        sky_visible = 0
        obstacles_visible = 0

        for direction in self.hemisphere_directions:
            # Lancer un rayon depuis le point dans la direction
            hit = self._cast_ray(point, direction, max_distance)

            if hit:
                obstacles_visible += 1
            else:
                sky_visible += 1

        total_directions = len(self.hemisphere_directions)
        svf_value = sky_visible / total_directions

        return SVFResult(
            svf_value=svf_value,
            sky_visible=sky_visible,
            obstacles_visible=obstacles_visible,
            total_hemisphere=total_directions,
            method="ray_casting",
            point_position=point,
            resolution=self.resolution,
        )

    def _cast_ray(self, origin: vec3, direction: vec3, max_distance: float) -> bool:
        """
        Lance un rayon et v√©rifie s'il intersecte un obstacle.

        Args:
            origin: Point d'origine du rayon
            direction: Direction du rayon (normalis√©e)
            max_distance: Distance maximale

        Returns:
            True si le rayon intersecte un obstacle, False sinon
        """
        # M√©thode simplifi√©e : v√©rifier si le rayon intersecte la g√©om√©trie
        # Dans une impl√©mentation compl√®te, utiliser les fonctions de ray casting d'Helios

        # Pour cette d√©monstration, on simule une intersection bas√©e sur la g√©om√©trie
        # En r√©alit√©, utiliser context.rayIntersect() ou √©quivalent

        # Simulation basique : v√©rifier si la direction pointe vers le sol
        if direction.z < 0:  # Direction vers le bas
            return True

        # V√©rifier les obstacles dans la direction
        # (Cette partie n√©cessiterait l'API de ray casting d'Helios)
        return False

    def calculate_svf_radiation_method(self, point: vec3) -> SVFResult:
        """
        Calcule le SVF en utilisant la simulation de rayonnement diffus.

        Args:
            point: Position du point d'√©valuation

        Returns:
            R√©sultat du calcul de SVF
        """
        print(
            f"üåû Calcul du SVF par m√©thode de rayonnement au point ({point.x:.2f}, {point.y:.2f}, {point.z:.2f})"
        )

        try:
            with RadiationModel(self.context) as rad:
                # Cr√©er une source de rayonnement diffus isotrope
                rad.addRadiationBand("SVF")
                rad.disableEmission("SVF")
                rad.setScatteringDepth("SVF", 0)
                rad.setDiffuseRayCount(
                    "SVF", self.resolution * 10
                )  # Plus de rayons pour pr√©cision

                # Cr√©er un patch de test au point d'√©valuation
                test_patch = self.context.addPatch(
                    center=point,
                    size=vec2(0.1, 0.1),  # Petit patch
                    color=RGBcolor(1, 0, 0),  # Rouge pour identification
                )

                # Configurer le rayonnement diffus isotrope
                rad.setDiffuseRadiationFlux("SVF", 1000.0)  # Flux unitaire

                # Ex√©cuter la simulation
                rad.updateGeometry()
                rad.runBand("SVF")

                # R√©cup√©rer le flux re√ßu
                flux_received = self.context.getPrimitiveData(
                    test_patch, "radiation_flux_SVF"
                )

                if flux_received is None:
                    flux_received = 0.0

                # Le SVF est proportionnel au flux re√ßu
                # Flux maximal th√©orique (ciel compl√®tement d√©gag√©)
                max_flux = 1000.0
                svf_value = min(flux_received / max_flux, 1.0)

                # Nettoyer le patch de test
                # (Dans une impl√©mentation compl√®te, supprimer le patch)

                return SVFResult(
                    svf_value=svf_value,
                    sky_visible=svf_value * self.resolution,
                    obstacles_visible=(1 - svf_value) * self.resolution,
                    total_hemisphere=self.resolution,
                    method="radiation",
                    point_position=point,
                    resolution=self.resolution,
                )

        except Exception as e:
            print(f"‚ùå Erreur lors du calcul par rayonnement: {e}")
            return SVFResult(
                svf_value=0.0,
                sky_visible=0,
                obstacles_visible=self.resolution,
                total_hemisphere=self.resolution,
                method="radiation",
                point_position=point,
                resolution=self.resolution,
            )

    def calculate_svf_hemispherical_projection(self, point: vec3) -> SVFResult:
        """
        Calcule le SVF par projection h√©misph√©rique.

        Args:
            point: Position du point d'√©valuation

        Returns:
            R√©sultat du calcul de SVF
        """
        print(
            f"üìê Calcul du SVF par projection h√©misph√©rique au point ({point.x:.2f}, {point.y:.2f}, {point.z:.2f})"
        )

        # Cr√©er une grille h√©misph√©rique
        sky_pixels = 0
        obstacle_pixels = 0

        for i in range(self.resolution):
            for j in range(self.resolution):
                # Coordonn√©es dans l'image h√©misph√©rique
                x = (i - self.resolution // 2) / (self.resolution // 2)
                y = (j - self.resolution // 2) / (self.resolution // 2)

                # V√©rifier si le point est dans l'h√©misph√®re
                if x * x + y * y <= 1:
                    # Convertir en direction 3D
                    z = math.sqrt(1 - x * x - y * y)
                    direction = vec3(x, y, z)

                    # V√©rifier si cette direction est obstru√©e
                    if self._is_direction_obstructed(point, direction):
                        obstacle_pixels += 1
                    else:
                        sky_pixels += 1

        total_pixels = sky_pixels + obstacle_pixels
        svf_value = sky_pixels / total_pixels if total_pixels > 0 else 0.0

        return SVFResult(
            svf_value=svf_value,
            sky_visible=sky_pixels,
            obstacles_visible=obstacle_pixels,
            total_hemisphere=total_pixels,
            method="hemispherical_projection",
            point_position=point,
            resolution=self.resolution,
        )

    def _is_direction_obstructed(self, point: vec3, direction: vec3) -> bool:
        """
        V√©rifie si une direction est obstru√©e par la g√©om√©trie.

        Args:
            point: Point d'√©valuation
            direction: Direction √† v√©rifier

        Returns:
            True si la direction est obstru√©e, False sinon
        """
        # Impl√©mentation simplifi√©e
        # En r√©alit√©, utiliser les fonctions d'intersection d'Helios

        # V√©rifier si la direction pointe vers le sol
        if direction.z < 0:
            return True

        # V√©rifier les obstacles dans la direction
        # (Cette partie n√©cessiterait l'API d'intersection d'Helios)
        return False

    def calculate_svf_comprehensive(self, point: vec3) -> Dict[str, SVFResult]:
        """
        Calcule le SVF avec toutes les m√©thodes disponibles.

        Args:
            point: Position du point d'√©valuation

        Returns:
            Dictionnaire avec les r√©sultats de toutes les m√©thodes
        """
        print(
            f"üéØ Calcul complet du SVF au point ({point.x:.2f}, {point.y:.2f}, {point.z:.2f})"
        )

        results = {}

        # M√©thode 1: Ray casting
        try:
            results["ray_casting"] = self.calculate_svf_ray_casting(point)
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur ray casting: {e}")

        # M√©thode 2: Rayonnement
        try:
            results["radiation"] = self.calculate_svf_radiation_method(point)
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur rayonnement: {e}")

        # M√©thode 3: Projection h√©misph√©rique
        try:
            results["hemispherical"] = self.calculate_svf_hemispherical_projection(
                point
            )
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur projection h√©misph√©rique: {e}")

        return results


def create_svf_visualization(
    svf_results: Dict[str, SVFResult], output_dir: str = "svf_results"
) -> None:
    """
    Cr√©e des visualisations du Sky View Factor.

    Args:
        svf_results: R√©sultats du calcul de SVF
        output_dir: Dossier de sortie
    """
    import os

    os.makedirs(output_dir, exist_ok=True)

    # Graphique comparatif des m√©thodes
    methods = list(svf_results.keys())
    svf_values = [svf_results[method].svf_value for method in methods]

    plt.figure(figsize=(10, 6))
    bars = plt.bar(methods, svf_values, color=["skyblue", "lightcoral", "lightgreen"])
    plt.title("Comparaison des m√©thodes de calcul du Sky View Factor")
    plt.xlabel("M√©thode")
    plt.ylabel("Valeur du SVF")
    plt.ylim(0, 1)

    # Ajouter les valeurs sur les barres
    for bar, value in zip(bars, svf_values):
        plt.text(
            bar.get_x() + bar.get_width() / 2,
            bar.get_height() + 0.01,
            f"{value:.3f}",
            ha="center",
            va="bottom",
        )

    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, "svf_comparison.png"), dpi=300)
    plt.show()

    # Graphique de r√©partition ciel/obstacles
    fig, axes = plt.subplots(1, len(methods), figsize=(15, 5))
    if len(methods) == 1:
        axes = [axes]

    for i, (method, result) in enumerate(svf_results.items()):
        labels = ["Ciel visible", "Obstacles"]
        sizes = [result.sky_visible, result.obstacles_visible]
        colors = ["skyblue", "lightcoral"]

        axes[i].pie(
            sizes, labels=labels, colors=colors, autopct="%1.1f%%", startangle=90
        )
        axes[i].set_title(f"{method}\nSVF = {result.svf_value:.3f}")

    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, "svf_distribution.png"), dpi=300)
    plt.show()


def calculate_svf_grid(
    context: Context, grid_center: vec3, grid_size: vec2, grid_resolution: int = 10
) -> pd.DataFrame:
    """
    Calcule le SVF sur une grille de points.

    Args:
        context: Contexte Helios
        grid_center: Centre de la grille
        grid_size: Taille de la grille
        grid_resolution: R√©solution de la grille

    Returns:
        DataFrame avec les r√©sultats du SVF
    """
    print(f"üó∫Ô∏è  Calcul du SVF sur une grille {grid_resolution}x{grid_resolution}")

    calculator = SkyViewFactorCalculator(context, resolution=50)

    results = []

    for i in range(grid_resolution):
        for j in range(grid_resolution):
            # Position du point dans la grille
            x = (
                grid_center.x
                - grid_size.x / 2
                + (i + 0.5) * grid_size.x / grid_resolution
            )
            y = (
                grid_center.y
                - grid_size.y / 2
                + (j + 0.5) * grid_size.y / grid_resolution
            )
            z = grid_center.z

            point = vec3(x, y, z)

            # Calcul du SVF
            svf_result = calculator.calculate_svf_ray_casting(point)

            results.append(
                {
                    "x": x,
                    "y": y,
                    "z": z,
                    "svf": svf_result.svf_value,
                    "sky_visible": svf_result.sky_visible,
                    "obstacles_visible": svf_result.obstacles_visible,
                }
            )

    return pd.DataFrame(results)


def main():
    """
    D√©monstration du calcul de Sky View Factor avec Helios.
    """
    print("üåå Calcul du Sky View Factor avec Helios")
    print("=" * 50)

    # Cr√©er un contexte de test
    with Context() as context:
        # Cr√©er une sc√®ne de test avec des obstacles
        print("üèóÔ∏è  Cr√©ation de la sc√®ne de test...")

        # Cr√©er un sol
        ground = context.addPatch(
            center=vec3(0, 0, 0), size=vec2(20, 20), color=RGBcolor(0.5, 0.5, 0.5)
        )

        # Cr√©er des obstacles (b√¢timents)
        obstacles = []
        for i in range(3):
            for j in range(3):
                if i == 1 and j == 1:  # Laissez le centre libre
                    continue

                obstacle = context.addPatch(
                    center=vec3(i * 5 - 5, j * 5 - 5, 2),
                    size=vec2(3, 3),
                    color=RGBcolor(0.8, 0.8, 0.8),
                )
                obstacles.append(obstacle)

        print(f"‚úÖ Sc√®ne cr√©√©e: 1 sol, {len(obstacles)} obstacles")

        # Calculer le SVF √† diff√©rents points
        test_points = [
            vec3(0, 0, 1),  # Centre (devrait avoir un SVF √©lev√©)
            vec3(5, 5, 1),  # Pr√®s d'un obstacle
            vec3(-5, -5, 1),  # Coin libre
        ]

        calculator = SkyViewFactorCalculator(context, resolution=100)

        for point in test_points:
            print(f"\nüìç Point de test: ({point.x:.1f}, {point.y:.1f}, {point.z:.1f})")

            # Calcul avec toutes les m√©thodes
            results = calculator.calculate_svf_comprehensive(point)

            # Afficher les r√©sultats
            for method, result in results.items():
                print(f"  {method}: SVF = {result.svf_value:.3f}")
                print(
                    f"    Ciel visible: {result.sky_visible:.0f}/{result.total_hemisphere}"
                )
                print(
                    f"    Obstacles: {result.obstacles_visible:.0f}/{result.total_hemisphere}"
                )

        # Calcul sur une grille
        print(f"\nüó∫Ô∏è  Calcul du SVF sur une grille...")
        grid_results = calculate_svf_grid(
            context,
            grid_center=vec3(0, 0, 1),
            grid_size=vec2(10, 10),
            grid_resolution=5,
        )

        print("üìä R√©sultats de la grille:")
        print(grid_results.head())

        # Sauvegarder les r√©sultats
        grid_results.to_csv("svf_grid_results.csv", index=False)
        print("üíæ R√©sultats sauvegard√©s dans svf_grid_results.csv")

        # Cr√©er des visualisations
        if test_points:
            point_results = calculator.calculate_svf_comprehensive(test_points[0])
            create_svf_visualization(point_results)

        print("\n‚úÖ Calcul du SVF termin√©!")


if __name__ == "__main__":
    main()
